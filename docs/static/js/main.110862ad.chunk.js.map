{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GridGifItem.js","components/GridGif.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GridGifItem","className","alt","src","GridGif","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"0MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACI,sBAAMC,SAZa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAG,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,8BCRlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAETC,EAFS,iDAEwCC,UAAWH,GAFnD,+DAGII,MAAOF,GAHX,cAGTG,EAHS,gBAIMA,EAAKC,OAJX,uBAIRC,EAJQ,EAIRA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAV3B,kBAcRM,GAdQ,4CAAH,sDCEPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAElC,OACI,sBAAKc,UAAU,oCAAf,UACI,qBAAKC,IAAKL,EAAOM,IAAKhB,IACtB,4BAAIU,QCHHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAIrB,ECLwB,SAACA,GAEtB,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAW,WACNxB,EAAQC,GAAUwB,MAAM,SAACC,GACrBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGpB,CAACpB,IAEIqB,EDXuBK,CAAa1B,GAAjCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAWrB,OACI,gCACI,6BAAKpB,IAEJoB,GAAW,mBAAGJ,UAAU,mCAAb,yBAEJH,EAAOJ,KAAK,SAAAC,GACR,OACI,wBAAC,EAAD,2BACQA,GADR,IAEIiB,IAAKjB,EAAIC,aEzB5BiB,EAAe,WAExB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAIA,OACI,gCACI,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,6BAEQ4C,EAAWpB,KAAI,SAAAT,GACX,OACI,cAAC,EAAD,CACIA,SAAUA,GACLA,YCVtB8B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCEZO,IAASC,OACT,cAAC,EAAD,IACAC,SAASC,eAAe,SAU1BX,M","file":"static/js/main.110862ad.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n    \r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2) {\r\n            setCategories( cat => [inputValue,...cat]);\r\n            setInputValue('');\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleOnSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange = { handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n    \r\n    \r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async(category) => {\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=O4NrAlzZ3wXrt5afhbkhyHypjLZdGdmZ`;\r\n        const resp = await fetch( url );\r\n        const {data} = await resp.json();\r\n        \r\n        const gifs = data.map( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n\r\n        return gifs;  \r\n}","import React from 'react'\r\n\r\nexport const GridGifItem = ({id,title,url}) => {\r\n\r\n    return (\r\n        <div className=\"animate__animated animate__fadeIn\">\r\n            <img alt={title} src={url}/>\r\n            <p>{title}</p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GridGifItem } from './GridGifItem';\r\n\r\nexport const GridGif = ({category}) => {\r\n\r\n    //const [images, setImages] = useState([])\r\n\r\n    const { data:images, loading } = useFetchGifs(category);\r\n    //renombramos data x data:images para cambiarle el nombre\r\n\r\n   /*  useEffect( ()=>{\r\n        getGifs(category).then( imgs => setImages(imgs));\r\n\r\n    },[ category ]); */\r\n\r\n    \r\n    \r\n    \r\n    return (\r\n        <div>\r\n            <h2>{category}</h2>\r\n            {/* {loading ? 'Cargando...' : 'Data cargada'} */}\r\n            {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n                {\r\n                    images.map( img => {\r\n                        return (\r\n                            <GridGifItem\r\n                                {...img}\r\n                                key={img.id}\r\n                            />\r\n                        )\r\n                    \r\n                    })\r\n                }\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n       const [state, setState] = useState({\r\n           data:[],\r\n           loading:true,\r\n       })\r\n\r\n       useEffect( () => {\r\n            getGifs(category).then( (imgs) =>{\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false \r\n                })\r\n            });\r\n       },[category]);\r\n\r\n       return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GridGif } from './components/GridGif'\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n    \r\n    //const handleAdd = ()=> setCategories( [...categories, Math.random()] )\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <hr/>\r\n            <AddCategory setCategories={setCategories}/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => {\r\n                        return(\r\n                            <GridGif\r\n                                category={category}\r\n                                key={category}\r\n                            />\r\n                        ) \r\n\r\n                    })\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\n\n\n  ReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n\n  )\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}